// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using advise.webapi.infrastructure.Context;

#nullable disable

namespace advise.webapi.infrastructure.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("advise.webapi.core.Models.Corretor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Corretores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5966),
                            Deletado = false,
                            Nome = "João Silva",
                            Status = true,
                            Telefone = "123456789"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5975),
                            Deletado = false,
                            Nome = "Maria Souza",
                            Status = true,
                            Telefone = "987654321"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5978),
                            Deletado = false,
                            Nome = "Pedro Santos",
                            Status = true,
                            Telefone = "555555555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5981),
                            Deletado = false,
                            Nome = "Ana Oliveira",
                            Status = true,
                            Telefone = "999999999"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5984),
                            Deletado = false,
                            Nome = "Carlos Fernandes",
                            Status = true,
                            Telefone = "777777777"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5989),
                            Deletado = false,
                            Nome = "Mariana Lima",
                            Status = true,
                            Telefone = "444444444"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5997),
                            Deletado = false,
                            Nome = "Rafaela Almeida",
                            Status = true,
                            Telefone = "888888888"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(5999),
                            Deletado = false,
                            Nome = "Lucas Costa",
                            Status = true,
                            Telefone = "666666666"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(6002),
                            Deletado = false,
                            Nome = "Fernanda Carvalho",
                            Status = true,
                            Telefone = "333333333"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(6006),
                            Deletado = false,
                            Nome = "Gabriel Martins",
                            Status = true,
                            Telefone = "111111111"
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.CorretorInquilinoContatos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorretorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("DescricaoContato")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("InquilinoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorretorId");

                    b.HasIndex("InquilinoId");

                    b.ToTable("CorretorInquilinoContatos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000009"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4670),
                            Deletado = false,
                            DescricaoContato = "Renovação do contrato de locação",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000017")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000005"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4693),
                            Deletado = false,
                            DescricaoContato = "Discussão sobre prazo de entrega",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000008"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4698),
                            Deletado = false,
                            DescricaoContato = "Agendamento de vistoria no imóvel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000016")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000007"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4702),
                            Deletado = false,
                            DescricaoContato = "Esclarecimento de dúvidas sobre o contrato",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000015")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4706),
                            Deletado = false,
                            DescricaoContato = "Pedido de reparos no imóvel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000019")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000006"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4713),
                            Deletado = false,
                            DescricaoContato = "Negociação do valor do aluguel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000014")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000004"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4717),
                            Deletado = false,
                            DescricaoContato = "Agendamento de visita ao imóvel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000010"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4732),
                            Deletado = false,
                            DescricaoContato = "Reclamação sobre problemas no imóvel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000018")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(4735),
                            Deletado = false,
                            DescricaoContato = "Confirmação de pagamento do aluguel",
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000020")
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.CorretorProprietarioContatos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorretorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("DescricaoContato")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("ProprietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorretorId");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("CorretorProprietarioContatos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000007"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9691),
                            Deletado = false,
                            DescricaoContato = "Solicitação de autorização para reparos no imóvel",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000028")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9703),
                            Deletado = false,
                            DescricaoContato = "Atualização sobre visitas ao imóvel para venda",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000023")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000004"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9710),
                            Deletado = false,
                            DescricaoContato = "Informações sobre propostas de aluguel recebidas",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000025")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9715),
                            Deletado = false,
                            DescricaoContato = "Negociação de comissão sobre venda de imóvel",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000022")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000009"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9726),
                            Deletado = false,
                            DescricaoContato = "Solicitação de documentos para declaração de imposto de renda",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000030")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000005"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9732),
                            Deletado = false,
                            DescricaoContato = "Agendamento de reunião para revisão de contrato de locação",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000026")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000008"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9737),
                            Deletado = false,
                            DescricaoContato = "Confirmação de pagamento de aluguel",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000029")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000006"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9742),
                            Deletado = false,
                            DescricaoContato = "Feedback sobre interessados em compra de imóvel",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000027")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CorretorId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 147, DateTimeKind.Local).AddTicks(9747),
                            Deletado = false,
                            DescricaoContato = "Discussão sobre estratégias de marketing para aluguel",
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000024")
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ImovelId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ImovelId")
                        .IsUnique();

                    b.ToTable("Enderecos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Bairro = "Bela Vista",
                            Cep = "01310100",
                            Cidade = "São Paulo",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1092),
                            Deletado = false,
                            Estado = "SP",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Logradouro = "Av. Paulista",
                            Numero = "1000"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Bairro = "Jardins",
                            Cep = "01426000",
                            Cidade = "São Paulo",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1103),
                            Deletado = false,
                            Estado = "SP",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Logradouro = "Rua Oscar Freire",
                            Numero = "500"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Bairro = "Copacabana",
                            Cep = "22021001",
                            Cidade = "Rio de Janeiro",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1108),
                            Deletado = false,
                            Estado = "RJ",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Logradouro = "Av. Atlântica",
                            Numero = "1500"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Bairro = "Consolação",
                            Cep = "01304001",
                            Cidade = "São Paulo",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1117),
                            Deletado = false,
                            Estado = "SP",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Logradouro = "Rua Augusta",
                            Numero = "800"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Bairro = "Consolação",
                            Cep = "01301000",
                            Cidade = "São Paulo",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1121),
                            Deletado = false,
                            Estado = "SP",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Logradouro = "Rua da Consolação",
                            Numero = "200"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Bairro = "Jardim América",
                            Cep = "01430000",
                            Cidade = "São Paulo",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1126),
                            Deletado = false,
                            Estado = "SP",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Logradouro = "Av. Brasil",
                            Numero = "300"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Bairro = "Centro",
                            Cep = "20071000",
                            Cidade = "Rio de Janeiro",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1130),
                            Deletado = false,
                            Estado = "RJ",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Logradouro = "Av. Presidente Vargas",
                            Numero = "100"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Bairro = "Jardim das Flores",
                            Cep = "30123456",
                            Cidade = "Belo Horizonte",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1134),
                            Deletado = false,
                            Estado = "MG",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Logradouro = "Rua das Flores",
                            Numero = "700"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Bairro = "Praia de Iracema",
                            Cep = "60060000",
                            Cidade = "Fortaleza",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1138),
                            Deletado = false,
                            Estado = "CE",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Logradouro = "Av. Beira Mar",
                            Numero = "2000"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Bairro = "Moinhos de Vento",
                            Cep = "90570000",
                            Cidade = "Porto Alegre",
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(1143),
                            Deletado = false,
                            Estado = "RS",
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Logradouro = "Rua Padre Chagas",
                            Numero = "900"
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.Imovel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PosicaoSolar")
                        .HasColumnType("int");

                    b.Property<Guid>("ProprietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QtdeBanheiros")
                        .HasColumnType("int");

                    b.Property<int>("QtdeQuartos")
                        .HasColumnType("int");

                    b.Property<int>("QtdeVagasGaragem")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TipoImovel")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("Imoveis", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7276),
                            Deletado = false,
                            Observacoes = "Apartamento compacto no centro da cidade.",
                            PosicaoSolar = 1,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000022"),
                            QtdeBanheiros = 1,
                            QtdeQuartos = 2,
                            QtdeVagasGaragem = 1,
                            Status = true,
                            TipoImovel = 2,
                            Valor = 200000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7301),
                            Deletado = false,
                            Observacoes = "Casa com acabamento de alto padrão.",
                            PosicaoSolar = 0,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000023"),
                            QtdeBanheiros = 2,
                            QtdeQuartos = 3,
                            QtdeVagasGaragem = 2,
                            Status = true,
                            TipoImovel = 1,
                            Valor = 350000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7306),
                            Deletado = false,
                            Observacoes = "Casa espaçosa com área de lazer.",
                            PosicaoSolar = 2,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000024"),
                            QtdeBanheiros = 3,
                            QtdeQuartos = 4,
                            QtdeVagasGaragem = 2,
                            Status = true,
                            TipoImovel = 1,
                            Valor = 400000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7311),
                            Deletado = false,
                            Observacoes = "Apartamento simples próximo ao metrô.",
                            PosicaoSolar = 3,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000025"),
                            QtdeBanheiros = 1,
                            QtdeQuartos = 1,
                            QtdeVagasGaragem = 0,
                            Status = true,
                            TipoImovel = 2,
                            Valor = 150000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7316),
                            Deletado = false,
                            Observacoes = "Casa aconchegante em condomínio fechado.",
                            PosicaoSolar = 0,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000026"),
                            QtdeBanheiros = 2,
                            QtdeQuartos = 3,
                            QtdeVagasGaragem = 2,
                            Status = true,
                            TipoImovel = 1,
                            Valor = 300000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7322),
                            Deletado = false,
                            Observacoes = "Apartamento bem localizado próximo a comércios.",
                            PosicaoSolar = 1,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000027"),
                            QtdeBanheiros = 1,
                            QtdeQuartos = 2,
                            QtdeVagasGaragem = 1,
                            Status = true,
                            TipoImovel = 2,
                            Valor = 180000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7326),
                            Deletado = false,
                            Observacoes = "Casa ampla em condomínio fechado.",
                            PosicaoSolar = 3,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000028"),
                            QtdeBanheiros = 3,
                            QtdeQuartos = 4,
                            QtdeVagasGaragem = 2,
                            Status = true,
                            TipoImovel = 1,
                            Valor = 400000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7329),
                            Deletado = false,
                            Observacoes = "Apartamento próximo ao parque.",
                            PosicaoSolar = 1,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000029"),
                            QtdeBanheiros = 1,
                            QtdeQuartos = 2,
                            QtdeVagasGaragem = 1,
                            Status = true,
                            TipoImovel = 2,
                            Valor = 180000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7333),
                            Deletado = false,
                            Observacoes = "Apartamento com ótima vista.",
                            PosicaoSolar = 0,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000030"),
                            QtdeBanheiros = 1,
                            QtdeQuartos = 2,
                            QtdeVagasGaragem = 1,
                            Status = true,
                            TipoImovel = 2,
                            Valor = 210000m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 148, DateTimeKind.Local).AddTicks(7342),
                            Deletado = false,
                            Observacoes = "Casa com acabamento de alto padrão.",
                            PosicaoSolar = 2,
                            ProprietarioId = new Guid("00000000-0000-0000-0000-000000000021"),
                            QtdeBanheiros = 2,
                            QtdeQuartos = 3,
                            QtdeVagasGaragem = 2,
                            Status = true,
                            TipoImovel = 1,
                            Valor = 350000m
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.Inquilino", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Inquilinos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4255),
                            Deletado = false,
                            Nome = "José Pereira",
                            Status = true,
                            Telefone = "111111111"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4275),
                            Deletado = false,
                            Nome = "Ana Paula",
                            Status = true,
                            Telefone = "222222222"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4278),
                            Deletado = false,
                            Nome = "Luiz Santos",
                            Status = true,
                            Telefone = "333333333"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4281),
                            Deletado = false,
                            Nome = "Mariana Oliveira",
                            Status = true,
                            Telefone = "444444444"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4284),
                            Deletado = false,
                            Nome = "Pedro Henrique",
                            Status = true,
                            Telefone = "555555555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4289),
                            Deletado = false,
                            Nome = "Carla Silva",
                            Status = true,
                            Telefone = "666666666"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4292),
                            Deletado = false,
                            Nome = "Rafaela Lima",
                            Status = true,
                            Telefone = "777777777"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4294),
                            Deletado = false,
                            Nome = "Gustavo Costa",
                            Status = true,
                            Telefone = "888888888"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4297),
                            Deletado = false,
                            Nome = "Fernanda Souza",
                            Status = true,
                            Telefone = "999999999"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(4303),
                            Deletado = false,
                            Nome = "Lucas Martins",
                            Status = true,
                            Telefone = "000000000"
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.InquilinoImovelLocacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtendimentoCorretorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<Guid>("ImovelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InquilinoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoCorretorId")
                        .IsUnique();

                    b.HasIndex("ImovelId");

                    b.HasIndex("InquilinoId");

                    b.ToTable("InquilinoImovelLocacoes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5779fadd-ba8e-4914-b682-efd8a78473d9"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000001"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("b57450c3-fa55-4928-9833-5035dd2c9cf5"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000002"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000002"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = new Guid("e3937f88-6995-4797-8512-bd3565df1a5a"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000003"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = new Guid("bd8c34d6-20fd-4503-979d-054b7a19a240"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000004"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000004"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000014")
                        },
                        new
                        {
                            Id = new Guid("055f517a-4886-49f5-86ff-d8f509bd61d3"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000005"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000005"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000015")
                        },
                        new
                        {
                            Id = new Guid("a0472edf-2d7a-4a14-b262-ca8dc44042af"),
                            AtendimentoCorretorId = new Guid("00000000-0000-0000-0000-000000000006"),
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrada = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            DataSaida = new DateTime(2024, 3, 31, 15, 52, 53, 78, DateTimeKind.Local),
                            Deletado = false,
                            ImovelId = new Guid("00000000-0000-0000-0000-000000000006"),
                            InquilinoId = new Guid("00000000-0000-0000-0000-000000000016")
                        });
                });

            modelBuilder.Entity("advise.webapi.core.Models.Proprietario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deletado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Proprietarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6169),
                            Deletado = false,
                            Nome = "José da Silva",
                            Status = true,
                            Telefone = "111111111"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6180),
                            Deletado = false,
                            Nome = "Ana Oliveira",
                            Status = true,
                            Telefone = "222222222"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6184),
                            Deletado = false,
                            Nome = "Luiz Pereira",
                            Status = true,
                            Telefone = "333333333"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6187),
                            Deletado = false,
                            Nome = "Mariana Santos",
                            Status = true,
                            Telefone = "444444444"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6190),
                            Deletado = false,
                            Nome = "Pedro Oliveira",
                            Status = true,
                            Telefone = "555555555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6195),
                            Deletado = false,
                            Nome = "Carla Pereira",
                            Status = true,
                            Telefone = "666666666"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6198),
                            Deletado = false,
                            Nome = "Rafaela Lima",
                            Status = true,
                            Telefone = "777777777"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6206),
                            Deletado = false,
                            Nome = "Gustavo Costa",
                            Status = true,
                            Telefone = "888888888"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6209),
                            Deletado = false,
                            Nome = "Fernanda Souza",
                            Status = true,
                            Telefone = "999999999"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            DataCriacao = new DateTime(2024, 3, 31, 16, 23, 26, 149, DateTimeKind.Local).AddTicks(6212),
                            Deletado = false,
                            Nome = "Lucas Martins",
                            Status = true,
                            Telefone = "000000000"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("advise.webapi.core.Models.CorretorInquilinoContatos", b =>
                {
                    b.HasOne("advise.webapi.core.Models.Corretor", "Corretor")
                        .WithMany("AtendimentosInquilinos")
                        .HasForeignKey("CorretorId")
                        .IsRequired();

                    b.HasOne("advise.webapi.core.Models.Inquilino", "Inquilino")
                        .WithMany("AtendimentosCorretores")
                        .HasForeignKey("InquilinoId")
                        .IsRequired();

                    b.Navigation("Corretor");

                    b.Navigation("Inquilino");
                });

            modelBuilder.Entity("advise.webapi.core.Models.CorretorProprietarioContatos", b =>
                {
                    b.HasOne("advise.webapi.core.Models.Corretor", "Corretor")
                        .WithMany("ContatosProprietarios")
                        .HasForeignKey("CorretorId")
                        .IsRequired();

                    b.HasOne("advise.webapi.core.Models.Proprietario", "Proprietario")
                        .WithMany("ContatosCorretores")
                        .HasForeignKey("ProprietarioId")
                        .IsRequired();

                    b.Navigation("Corretor");

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("advise.webapi.core.Models.Endereco", b =>
                {
                    b.HasOne("advise.webapi.core.Models.Imovel", "Imovel")
                        .WithOne("Endereco")
                        .HasForeignKey("advise.webapi.core.Models.Endereco", "ImovelId")
                        .IsRequired();

                    b.Navigation("Imovel");
                });

            modelBuilder.Entity("advise.webapi.core.Models.Imovel", b =>
                {
                    b.HasOne("advise.webapi.core.Models.Proprietario", "Proprietario")
                        .WithMany("Imoveis")
                        .HasForeignKey("ProprietarioId")
                        .IsRequired();

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("advise.webapi.core.Models.InquilinoImovelLocacao", b =>
                {
                    b.HasOne("advise.webapi.core.Models.CorretorInquilinoContatos", "AtendimentoCorretor")
                        .WithOne()
                        .HasForeignKey("advise.webapi.core.Models.InquilinoImovelLocacao", "AtendimentoCorretorId")
                        .IsRequired();

                    b.HasOne("advise.webapi.core.Models.Imovel", "Imovel")
                        .WithMany("Locacoes")
                        .HasForeignKey("ImovelId")
                        .IsRequired();

                    b.HasOne("advise.webapi.core.Models.Inquilino", "Inquilino")
                        .WithMany("Locacoes")
                        .HasForeignKey("InquilinoId")
                        .IsRequired();

                    b.Navigation("AtendimentoCorretor");

                    b.Navigation("Imovel");

                    b.Navigation("Inquilino");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("advise.webapi.core.Models.Corretor", b =>
                {
                    b.Navigation("AtendimentosInquilinos");

                    b.Navigation("ContatosProprietarios");
                });

            modelBuilder.Entity("advise.webapi.core.Models.Imovel", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("advise.webapi.core.Models.Inquilino", b =>
                {
                    b.Navigation("AtendimentosCorretores");

                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("advise.webapi.core.Models.Proprietario", b =>
                {
                    b.Navigation("ContatosCorretores");

                    b.Navigation("Imoveis");
                });
#pragma warning restore 612, 618
        }
    }
}
